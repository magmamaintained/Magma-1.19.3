--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -70,8 +_,13 @@
    });
    private final PacketFlow f_129466_;
    private final Queue<Connection.PacketHolder> f_129467_ = Queues.newConcurrentLinkedQueue();
-   private Channel f_129468_;
-   private SocketAddress f_129469_;
+   public Channel f_129468_;
+   public SocketAddress f_129469_;
+   // Spigot Start
+   public java.util.UUID spoofedUUID;
+   public com.mojang.authlib.properties.Property[] spoofedProfile;
+   public boolean preparing = true;
+   // Spigot End
    private PacketListener f_129470_;
    private Component f_129471_;
    private boolean f_129472_;
@@ -82,6 +_,8 @@
    private float f_129477_;
    private int f_129478_;
    private boolean f_129479_;
+   public String hostname = ""; // CraftBukkit - add field
+   private java.util.function.Consumer<Connection> activationHandler;
 
    public Connection(PacketFlow p_129482_) {
       this.f_129466_ = p_129482_;
@@ -91,6 +_,10 @@
       super.channelActive(p_129525_);
       this.f_129468_ = p_129525_.channel();
       this.f_129469_ = this.f_129468_.remoteAddress();
+      // Spigot Start
+      this.preparing = false;
+      // Spigot End
+      if (activationHandler != null) activationHandler.accept(this);
 
       try {
          this.m_129498_(ConnectionProtocol.HANDSHAKING);
@@ -138,6 +_,7 @@
 
          }
       }
+      if (net.minecraft.server.MinecraftServer.getServer().isDebugging()) p_129534_.printStackTrace(); // Spigot
    }
 
    protected void channelRead0(ChannelHandlerContext p_129487_, Packet<?> p_129488_) {
@@ -186,7 +_,7 @@
       ++this.f_129475_;
       if (connectionprotocol1 != connectionprotocol) {
          f_129465_.debug("Disabled auto read");
-         this.f_129468_.config().setAutoRead(false);
+         this.f_129468_.eventLoop().execute(()->this.f_129468_.config().setAutoRead(false));
       }
 
       if (this.f_129468_.eventLoop().inEventLoop()) {
@@ -272,8 +_,11 @@
    }
 
    public void m_129507_(Component p_129508_) {
+      // Spigot Start
+      this.preparing = false;
+      // Spigot End
       if (this.f_129468_.isOpen()) {
-         this.f_129468_.close().awaitUninterruptibly();
+         this.f_129468_.close();  // We can't wait as this may be called from an event loop.
          this.f_129471_ = p_129508_;
       }
 
@@ -292,7 +_,9 @@
    }
 
    public static Connection m_178300_(InetSocketAddress p_178301_, boolean p_178302_) {
+      net.minecraftforge.network.DualStackUtils.checkIPv6(p_178301_.getAddress());
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       LazyLoadedValue<? extends EventLoopGroup> lazyloadedvalue;
       if (Epoll.isAvailable() && p_178302_) {
@@ -318,6 +_,7 @@
 
    public static Connection m_129493_(SocketAddress p_129494_) {
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(f_129464_.m_13971_()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_129557_) {
             p_129557_.pipeline().addLast("packet_handler", connection);
@@ -393,6 +_,7 @@
             } else if (this.m_129538_() != null) {
                this.m_129538_().m_7026_(Component.m_237115_("multiplayer.disconnect.generic"));
             }
+            this.f_129467_.clear(); // Free up packet queue.
          }
 
       }
@@ -406,6 +_,14 @@
       return this.f_129477_;
    }
 
+   public Channel channel() {
+      return f_129468_;
+   }
+
+   public PacketFlow getDirection() {
+      return this.f_129466_;
+   }
+
    static class PacketHolder {
       final Packet<?> f_129558_;
       @Nullable
@@ -416,4 +_,11 @@
          this.f_129559_ = p_243266_;
       }
    }
+
+   // Spigot Start
+   public SocketAddress getRawAddress()
+   {
+      return this.f_129468_.remoteAddress();
+   }
+   // Spigot End
 }
