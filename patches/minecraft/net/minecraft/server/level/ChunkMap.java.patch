--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -72,7 +_,9 @@
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
-import net.minecraft.world.entity.boss.EnderDragonPart;
+import net.minecraft.world.entity.animal.Animal;
+import net.minecraft.world.entity.animal.WaterAnimal;
+import net.minecraft.world.entity.npc.Npc;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.chunk.ChunkAccess;
@@ -98,6 +_,7 @@
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.commons.lang3.mutable.MutableObject;
+import org.bukkit.craftbukkit.v1_19_R2.generator.CustomChunkGenerator;
 import org.slf4j.Logger;
 
 public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider {
@@ -142,6 +_,27 @@
    private final Queue<Runnable> f_140125_ = Queues.newConcurrentLinkedQueue();
    int f_140126_;
 
+   // CraftBukkit start - recursion-safe executor for Chunk loadCallback() and unloadCallback()
+   public final CallbackExecutor callbackExecutor = new CallbackExecutor();
+   public static final class CallbackExecutor implements java.util.concurrent.Executor, Runnable {
+
+      private final java.util.Queue<Runnable> queue = new java.util.ArrayDeque<>();
+
+      @Override
+      public void execute(Runnable runnable) {
+         queue.add(runnable);
+      }
+
+      @Override
+      public void run() {
+         Runnable task;
+         while ((task = queue.poll()) != null) {
+            task.run();
+         }
+      }
+   };
+   // CraftBukkit end
+
    public ChunkMap(ServerLevel p_214836_, LevelStorageSource.LevelStorageAccess p_214837_, DataFixer p_214838_, StructureTemplateManager p_214839_, Executor p_214840_, BlockableEventLoop<Runnable> p_214841_, LightChunkGetter p_214842_, ChunkGenerator p_214843_, ChunkProgressListener p_214844_, ChunkStatusUpdateListener p_214845_, Supplier<DimensionDataStorage> p_214846_, int p_214847_, boolean p_214848_) {
       super(p_214837_.m_197394_(p_214836_.m_46472_()).resolve("region"), p_214838_, p_214848_);
       this.f_214833_ = p_214839_;
@@ -149,6 +_,13 @@
       this.f_182284_ = path.getFileName().toString();
       this.f_140133_ = p_214836_;
       this.f_140136_ = p_214843_;
+
+      // CraftBukkit start - SPIGOT-7051: It's a rigged game! Use delegate for random state creation, otherwise it is not so random.
+      if (p_214843_ instanceof CustomChunkGenerator) {
+         p_214843_ = ((CustomChunkGenerator) p_214843_).getDelegate();
+      }
+      // CraftBukkit end
+
       RegistryAccess registryaccess = p_214836_.m_8891_();
       long i = p_214836_.m_7328_();
       if (p_214843_ instanceof NoiseBasedChunkGenerator noisebasedchunkgenerator) {
@@ -157,7 +_,9 @@
          this.f_214834_ = RandomState.m_255302_(NoiseGeneratorSettings.m_238396_(), registryaccess.m_255025_(Registries.f_256865_), i);
       }
 
+      p_214843_.prepare_createState(p_214836_.spigotConfig); //Magma
       this.f_254626_ = p_214843_.m_255169_(registryaccess.m_255025_(Registries.f_256998_), this.f_214834_, i);
+      p_214843_.prepare_createState(null); //Magma
       this.f_140135_ = p_214841_;
       ProcessorMailbox<Runnable> processormailbox1 = ProcessorMailbox.m_18751_(p_214840_, "worldgen");
       ProcessorHandle<Runnable> processorhandle = ProcessorHandle.m_18714_("main", p_214841_::m_6937_);
@@ -395,6 +_,7 @@
             this.f_140140_ = true;
          }
 
+         net.minecraftforge.event.ForgeEventFactory.fireChunkTicketLevelUpdated(this.f_140133_, p_140177_, p_140180_, p_140178_, p_140179_);
          return p_140179_;
       }
    }
@@ -500,6 +_,7 @@
             if (this.f_140131_.remove(p_140182_, p_140183_) && p_203002_ != null) {
                if (p_203002_ instanceof LevelChunk) {
                   ((LevelChunk)p_203002_).m_62913_(false);
+                  net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.ChunkEvent.Unload(p_203002_));
                }
 
                this.m_140258_(p_203002_);
@@ -671,7 +_,21 @@
 
    private static void m_143064_(ServerLevel p_143065_, List<CompoundTag> p_143066_) {
       if (!p_143066_.isEmpty()) {
-         p_143065_.m_143327_(EntityType.m_147045_(p_143066_, p_143065_));
+         // CraftBukkit start - these are spawned serialized (DefinedStructure) and we don't call an add event below at the moment due to ordering complexities
+         p_143065_.m_143327_(EntityType.m_147045_(p_143066_, p_143065_).filter((entity) -> {
+            boolean needsRemoval = false;
+            net.minecraft.server.dedicated.DedicatedServer server = p_143065_.getCraftServer().getServer();
+            if (!server.m_6997_() && entity instanceof Npc) {
+               entity.m_146870_();
+               needsRemoval = true;
+            }
+            if (!server.m_6998_() && (entity instanceof Animal || entity instanceof WaterAnimal)) {
+               entity.m_146870_();
+               needsRemoval = true;
+            }
+            return !needsRemoval;
+         }));
+         // CraftBukkit end
       }
 
    }
@@ -699,8 +_,14 @@
             levelchunk.m_62952_();
             if (this.f_140132_.add(chunkpos.m_45588_())) {
                levelchunk.m_62913_(true);
+               try {
+               p_140384_.currentlyLoading = levelchunk; // Forge - bypass the future chain when getChunk is called, this prevents deadlocks.
                levelchunk.m_156369_();
                levelchunk.m_187958_(this.f_140133_);
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.ChunkEvent.Load(levelchunk));
+               } finally {
+                   p_140384_.currentlyLoading = null; // Forge - Stop bypassing the future chain.
+               }
             }
 
             return levelchunk;
@@ -803,6 +_,7 @@
 
             this.f_140133_.m_46473_().m_6174_("chunkSave");
             CompoundTag compoundtag = ChunkSerializer.m_63454_(this.f_140133_, p_140259_);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.ChunkDataEvent.Save(p_140259_, p_140259_.getWorldForge() != null ? p_140259_.getWorldForge() : this.f_140133_, compoundtag));
             this.m_63502_(chunkpos, compoundtag);
             this.m_140229_(chunkpos, chunkstatus.m_62494_());
             return true;
@@ -873,6 +_,7 @@
 
          if (!p_183759_ && p_183758_) {
             p_183755_.m_9088_(p_183756_);
+            net.minecraftforge.event.ForgeEventFactory.fireChunkUnWatch(p_183755_, p_183756_, this.f_140133_);
          }
 
       }
@@ -930,21 +_,32 @@
 
    private CompletableFuture<Optional<CompoundTag>> m_214963_(ChunkPos p_214964_) {
       return this.m_223454_(p_214964_).thenApplyAsync((p_214907_) -> {
-         return p_214907_.map(this::m_214947_);
+         return p_214907_.map((nbttagcompound) -> upgradeChunkTag(nbttagcompound, p_214964_)); // CraftBukkit
       }, Util.m_183991_());
    }
-
-   private CompoundTag m_214947_(CompoundTag p_214948_) {
-      return this.m_188288_(this.f_140133_.m_46472_(), this.f_140137_, p_214948_, this.f_140136_.m_187743_());
+   // CraftBukkit start
+   private CompoundTag upgradeChunkTag(CompoundTag p_214948_, ChunkPos chunkcoordintpair) {
+      return this.upgradeChunkTag(this.f_140133_.m_46472_(), this.f_140137_, p_214948_, this.f_140136_.m_187743_(), chunkcoordintpair, f_140133_);
+      // CraftBukkit end
    }
 
    boolean m_183879_(ChunkPos p_183880_) {
+      // Spigot start
+      return anyPlayerCloseEnoughForSpawning(p_183880_, false);
+   }
+
+   boolean anyPlayerCloseEnoughForSpawning(ChunkPos p_183880_, boolean reducedRange) {
+      int chunkRange = f_140133_.spigotConfig.mobSpawnRange;
+      chunkRange = (chunkRange > f_140133_.spigotConfig.viewDistance) ? (byte) f_140133_.spigotConfig.viewDistance : chunkRange;
+      chunkRange = (chunkRange > 8) ? 8 : chunkRange;
+      double blockRange = (reducedRange) ? Math.pow(chunkRange << 4, 2) : 16384.0D;
+      // Spigot end
       long i = p_183880_.m_45588_();
       if (!this.f_140145_.m_140847_(i)) {
          return false;
       } else {
          for(ServerPlayer serverplayer : this.f_140149_.m_183926_(i)) {
-            if (this.m_183751_(serverplayer, p_183880_)) {
+            if (this.playerIsCloseEnoughForSpawning(serverplayer, p_183880_, blockRange)) {
                return true;
             }
          }
@@ -961,7 +_,7 @@
          ImmutableList.Builder<ServerPlayer> builder = ImmutableList.builder();
 
          for(ServerPlayer serverplayer : this.f_140149_.m_183926_(i)) {
-            if (this.m_183751_(serverplayer, p_183889_)) {
+            if (this.playerIsCloseEnoughForSpawning(serverplayer, p_183889_, 16384.0D)) { // Spigot
                builder.add(serverplayer);
             }
          }
@@ -970,12 +_,18 @@
       }
    }
 
+   // Magma - start
    private boolean m_183751_(ServerPlayer p_183752_, ChunkPos p_183753_) {
+      return playerIsCloseEnoughForSpawning(p_183752_, p_183753_, 16384.0D);
+   }
+   // Magma - end
+
+   private boolean playerIsCloseEnoughForSpawning(ServerPlayer p_183752_, ChunkPos p_183753_, double range) { // Spigot
       if (p_183752_.m_5833_()) {
          return false;
       } else {
          double d0 = m_140226_(p_183753_, p_183752_);
-         return d0 < 16384.0D;
+         return d0 < range; // Spigot
       }
    }
 
@@ -1115,9 +_,11 @@
    }
 
    protected void m_140199_(Entity p_140200_) {
-      if (!(p_140200_ instanceof EnderDragonPart)) {
+      org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
+      if (!(p_140200_ instanceof net.minecraftforge.entity.PartEntity)) {
          EntityType<?> entitytype = p_140200_.m_6095_();
          int i = entitytype.m_20681_() * 16;
+         i = org.spigotmc.TrackingRange.getEntityTrackingRange(p_140200_, i); // Spigot
          if (i != 0) {
             int j = entitytype.m_20682_();
             if (this.f_140150_.containsKey(p_140200_.m_19879_())) {
@@ -1143,6 +_,7 @@
    }
 
    protected void m_140331_(Entity p_140332_) {
+      org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
       if (p_140332_ instanceof ServerPlayer serverplayer) {
          this.m_140192_(serverplayer, false);
 
@@ -1262,6 +_,7 @@
          }
       }
 
+      net.minecraftforge.event.ForgeEventFactory.fireChunkWatch(p_183761_, p_183763_, this.f_140133_);
    }
 
    protected PoiManager m_140424_() {
@@ -1304,7 +_,7 @@
       public final Set<ServerPlayerConnection> f_140475_ = Sets.newIdentityHashSet();
 
       public TrackedEntity(Entity p_140478_, int p_140479_, int p_140480_, boolean p_140481_) {
-         this.f_140471_ = new ServerEntity(ChunkMap.this.f_140133_, p_140478_, p_140480_, p_140481_, this::m_140489_);
+         this.f_140471_ = new ServerEntity(ChunkMap.this.f_140133_, p_140478_, p_140480_, p_140481_, this::m_140489_, f_140475_);
          this.f_140472_ = p_140478_;
          this.f_140473_ = p_140479_;
          this.f_140474_ = SectionPos.m_235861_(p_140478_);
@@ -1345,6 +_,7 @@
       }
 
       public void m_140485_(ServerPlayer p_140486_) {
+         org.spigotmc.AsyncCatcher.catchOp("player tracker clear"); // Spigot
          if (this.f_140475_.remove(p_140486_.f_8906_)) {
             this.f_140471_.m_8534_(p_140486_);
          }
@@ -1352,12 +_,20 @@
       }
 
       public void m_140497_(ServerPlayer p_140498_) {
+         org.spigotmc.AsyncCatcher.catchOp("player tracker update"); // Spigot
          if (p_140498_ != this.f_140472_) {
             Vec3 vec3 = p_140498_.m_20182_().m_82546_(this.f_140472_.m_20182_());
             double d0 = (double)Math.min(this.m_140496_(), (ChunkMap.this.f_140126_ - 1) * 16);
             double d1 = vec3.f_82479_ * vec3.f_82479_ + vec3.f_82481_ * vec3.f_82481_;
             double d2 = d0 * d0;
             boolean flag = d1 <= d2 && this.f_140472_.m_6459_(p_140498_);
+
+            // CraftBukkit start - respect vanish API
+            if (!p_140498_.getBukkitEntity().canSee(this.f_140472_.getBukkitEntity())) {
+               flag = false;
+            }
+            // CraftBukkit end
+
             if (flag) {
                if (this.f_140475_.add(p_140498_.f_8906_)) {
                   this.f_140471_.m_8541_(p_140498_);
