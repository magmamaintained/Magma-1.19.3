--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -20,6 +_,7 @@
 import java.util.Set;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
@@ -47,17 +_,7 @@
 import net.minecraft.network.Connection;
 import net.minecraft.network.PacketSendListener;
 import net.minecraft.network.TickablePacketListener;
-import net.minecraft.network.chat.ChatType;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.LastSeenMessages;
-import net.minecraft.network.chat.LastSeenMessagesValidator;
-import net.minecraft.network.chat.MessageSignature;
-import net.minecraft.network.chat.MessageSignatureCache;
-import net.minecraft.network.chat.PlayerChatMessage;
-import net.minecraft.network.chat.RemoteChatSession;
-import net.minecraft.network.chat.SignableCommand;
-import net.minecraft.network.chat.SignedMessageBody;
-import net.minecraft.network.chat.SignedMessageChain;
+import net.minecraft.network.chat.*;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketUtils;
 import net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket;
@@ -177,11 +_,26 @@
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.LazyPlayerSet;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerChatEvent;
+import org.bukkit.event.player.PlayerChatEvent;
+import org.bukkit.event.player.PlayerCommandPreprocessEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
 import org.slf4j.Logger;
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, TickablePacketListener, ServerGamePacketListener {
    static final Logger f_9744_ = LogUtils.getLogger();
    private static final int f_143608_ = 15000;
+   /**
+    * Forge: Deprecated in favor of range/reach attributes.
+    * @see net.minecraftforge.common.ForgeMod#REACH_DISTANCE
+    * @see net.minecraftforge.common.ForgeMod#ATTACK_RANGE
+    */
+   @Deprecated
    public static final double f_215198_ = Mth.m_144952_(6.0D);
    private static final int f_215199_ = -1;
    private static final int f_244471_ = 4096;
@@ -238,6 +_,28 @@
       p_9772_.m_8967_().m_7674_();
       this.f_240889_ = p_9770_.m_214005_() ? SignedMessageChain.Decoder.f_252472_ : SignedMessageChain.Decoder.m_246683_(p_9772_.m_20148_());
       this.f_241681_ = new FutureChain(p_9770_);
+      // CraftBukkit start - add fields and methods
+      this.cserver = p_9770_.server;
+   }
+
+   private final org.bukkit.craftbukkit.CraftServer cserver;
+   public boolean processedDisconnect;
+   private int lastTick = MinecraftServer.currentTick;
+   private int allowedPlayerTicks = 1;
+   private int lastDropTick = MinecraftServer.currentTick;
+   private int lastBookTick  = MinecraftServer.currentTick;
+   private int dropCount = 0;
+
+   // Get position of last block hit for BlockDamageLevel.STOPPED
+   private double lastPosX = Double.MAX_VALUE;
+   private double lastPosY = Double.MAX_VALUE;
+   private double lastPosZ = Double.MAX_VALUE;
+   private float lastPitch = Float.MAX_VALUE;
+   private float lastYaw = Float.MAX_VALUE;
+   private boolean justTeleported = false;
+
+   public CraftPlayer getCraftPlayer() {
+      return (this.f_9743_ == null) ? null : (CraftPlayer) this.f_9743_.getBukkitEntity();
    }
 
    public void m_9933_() {
@@ -426,9 +_,11 @@
             }
 
             entity.m_19890_(d3, d4, d5, f, f1);
+            this.f_9743_.m_19890_(d3, d4, d5, this.f_9743_.m_146908_(), this.f_9743_.m_146909_()); // Forge - Resync player position on vehicle moving
             boolean flag3 = serverlevel.m_45756_(entity, entity.m_20191_().m_82406_(0.0625D));
             if (flag && (flag2 || !flag3)) {
                entity.m_19890_(d0, d1, d2, f, f1);
+               this.f_9743_.m_19890_(d3, d4, d5, this.f_9743_.m_146908_(), this.f_9743_.m_146909_()); // Forge - Resync player position on vehicle moving
                this.f_9742_.m_129512_(new ClientboundMoveVehiclePacket(entity));
                return;
             }
@@ -445,7 +_,7 @@
    }
 
    private boolean m_9793_(Entity p_9794_) {
-      return p_9794_.f_19853_.m_45556_(p_9794_.m_20191_().m_82400_(0.0625D).m_82363_(0.0D, -0.55D, 0.0D)).allMatch(BlockBehaviour.BlockStateBase::m_60795_);
+      return BlockPos.m_121921_(p_9794_.m_20191_().m_82400_(0.0625D).m_82363_(0.0D, -0.55D, 0.0D)).allMatch(b -> p_9794_.f_19853_.m_8055_(b).m_60795_());
    }
 
    public void m_7376_(ServerboundAcceptTeleportationPacket p_9835_) {
@@ -947,32 +_,126 @@
       return false;
    }
 
+   // CraftBukkit start - Delegate to teleport(Location)
    public void m_143611_(double p_143612_, double p_143613_, double p_143614_, float p_143615_, float p_143616_) {
-      this.m_143617_(p_143612_, p_143613_, p_143614_, p_143615_, p_143616_, Collections.emptySet(), true);
-   }
-
+      this.dismount( p_143612_, p_143613_, p_143614_, p_143615_, p_143616_, PlayerTeleportEvent.TeleportCause.UNKNOWN );
+   }
+
+   public void dismount(double p_143612_, double p_143613_, double p_143614_, float p_143615_, float p_143616_, PlayerTeleportEvent.TeleportCause cause) {
+      this.m_143617_( p_143612_, p_143613_, p_143614_, p_143615_, p_143616_, Collections.emptySet(), true );
+   }
+
+   //Magma start - move bukkit teleport to its own method
    public void m_9774_(double p_9775_, double p_9776_, double p_9777_, float p_9778_, float p_9779_) {
-      this.m_143617_(p_9775_, p_9776_, p_9777_, p_9778_, p_9779_, Collections.emptySet(), false);
+      this.teleport( p_9775_, p_9776_, p_9777_, p_9778_, p_9779_, PlayerTeleportEvent.TeleportCause.UNKNOWN );
+   }
+
+   public void teleport(double d0, double d1, double d2, float f, float f1, PlayerTeleportEvent.TeleportCause cause) {
+      this.prepareTeleport(cause);
+      this.m_143617_( d0, d1, d2, f, f1, Collections.emptySet(), false );
+   }
+
+
+   public void teleport(double p_9781_, double p_9782_, double p_9783_, float p_9784_, float p_9785_, Set<ClientboundPlayerPositionPacket.RelativeArgument> p_9786_, PlayerTeleportEvent.TeleportCause cause) {
+      this.prepareTeleport(cause);
+      this.m_143617_( p_9781_, p_9782_, p_9783_, p_9784_, p_9785_, p_9786_, false );
    }
 
    public void m_9780_(double p_9781_, double p_9782_, double p_9783_, float p_9784_, float p_9785_, Set<ClientboundPlayerPositionPacket.RelativeArgument> p_9786_) {
-      this.m_143617_(p_9781_, p_9782_, p_9783_, p_9784_, p_9785_, p_9786_, false);
-   }
-
+      resetCause();
+      this.m_143617_( p_9781_, p_9782_, p_9783_, p_9784_, p_9785_, p_9786_, false );
+   }
+
+   PlayerTeleportEvent.TeleportCause teleportCause = PlayerTeleportEvent.TeleportCause.UNKNOWN;
+
+   public void prepareTeleport(PlayerTeleportEvent.TeleportCause cause) {
+      teleportCause = cause;
+   }
+
+   public void resetCause() {
+      teleportCause = PlayerTeleportEvent.TeleportCause.UNKNOWN;
+   }
+
+   private boolean teleportResult = true; //assume that the player teleported successfully
    public void m_143617_(double p_143618_, double p_143619_, double p_143620_, float p_143621_, float p_143622_, Set<ClientboundPlayerPositionPacket.RelativeArgument> p_143623_, boolean p_143624_) {
-      double d0 = p_143623_.contains(ClientboundPlayerPositionPacket.RelativeArgument.X) ? this.f_9743_.m_20185_() : 0.0D;
-      double d1 = p_143623_.contains(ClientboundPlayerPositionPacket.RelativeArgument.Y) ? this.f_9743_.m_20186_() : 0.0D;
-      double d2 = p_143623_.contains(ClientboundPlayerPositionPacket.RelativeArgument.Z) ? this.f_9743_.m_20189_() : 0.0D;
-      float f = p_143623_.contains(ClientboundPlayerPositionPacket.RelativeArgument.Y_ROT) ? this.f_9743_.m_146908_() : 0.0F;
-      float f1 = p_143623_.contains(ClientboundPlayerPositionPacket.RelativeArgument.X_ROT) ? this.f_9743_.m_146909_() : 0.0F;
-      this.f_9766_ = new Vec3(p_143618_, p_143619_, p_143620_);
+      PlayerTeleportEvent.TeleportCause tmp = teleportCause;
+      resetCause();
+      teleportResult = true;
+
+      org.bukkit.entity.Player player = this.getCraftPlayer();
+      Location from = player.getLocation();
+
+      double x = p_143618_;
+      double y = p_143619_;
+      double z = p_143620_;
+      float yaw = p_143621_;
+      float pitch = p_143622_;
+
+      Location to = new Location( this.getCraftPlayer().getWorld(), x, y, z, yaw, pitch );
+      // SPIGOT-5171: Triggered on join
+      if (from.equals( to )) {
+         this.internalTeleport( p_143618_, p_143619_, p_143620_, p_143621_, p_143622_, p_143623_, p_143624_ );
+         return; // CraftBukkit - Return event status
+      }
+
+      PlayerTeleportEvent event = new PlayerTeleportEvent( player, from.clone(), to.clone(), tmp );
+      this.cserver.getPluginManager().callEvent( event );
+
+      if (event.isCancelled() || !to.equals( event.getTo() )) {
+         p_143623_.clear(); // Can't relative teleport
+         to = event.isCancelled() ? event.getFrom() : event.getTo();
+         p_143618_ = to.getX();
+         p_143619_ = to.getY();
+         p_143620_ = to.getZ();
+         p_143621_ = to.getYaw();
+         p_143622_ = to.getPitch();
+      }
+
+      this.internalTeleport( p_143618_, p_143619_, p_143620_, p_143621_, p_143622_, p_143623_, p_143624_ );
+      teleportResult = event.isCancelled(); // CraftBukkit - Return event status //Magma - set to variable
+   }
+
+   public boolean teleport(double p_143618_, double p_143619_, double p_143620_, float p_143621_, float p_143622_, Set<ClientboundPlayerPositionPacket.RelativeArgument> p_143623_, boolean p_143624_, PlayerTeleportEvent.TeleportCause cause) {
+      this.prepareTeleport(cause);
+      this.m_143617_( p_143618_, p_143619_, p_143620_, p_143621_, p_143622_, p_143623_, p_143624_ );
+      boolean result = teleportResult;
+      teleportResult = true; //reset
+      return result;
+   }
+   //Magma end
+
+   public void internalTeleport(double p_143618_, double p_143619_, double p_143620_, float p_143621_, float p_143622_, Set<ClientboundPlayerPositionPacket.RelativeArgument> p_143623_, boolean p_143624_) {
+      //CraftBukkit start
+      if (Float.isNaN( p_143621_ )) {
+         p_143621_ = 0;
+      }
+
+      if (Float.isNaN( p_143622_ )) {
+         p_143622_ = 0;
+      }
+
+      this.justTeleported = true;
+      double d0 = p_143623_.contains( ClientboundPlayerPositionPacket.RelativeArgument.X ) ? this.f_9743_.m_20185_() : 0.0D;
+      double d1 = p_143623_.contains( ClientboundPlayerPositionPacket.RelativeArgument.Y ) ? this.f_9743_.m_20186_() : 0.0D;
+      double d2 = p_143623_.contains( ClientboundPlayerPositionPacket.RelativeArgument.Z ) ? this.f_9743_.m_20189_() : 0.0D;
+      float f = p_143623_.contains( ClientboundPlayerPositionPacket.RelativeArgument.Y_ROT ) ? this.f_9743_.m_146908_() : 0.0F;
+      float f1 = p_143623_.contains( ClientboundPlayerPositionPacket.RelativeArgument.X_ROT ) ? this.f_9743_.m_146909_() : 0.0F;
+      this.f_9766_ = new Vec3( p_143618_, p_143619_, p_143620_ );
       if (++this.f_9767_ == Integer.MAX_VALUE) {
          this.f_9767_ = 0;
       }
 
+      // CraftBukkit start - update last location
+      this.lastPosX = this.f_9766_.f_82479_;
+      this.lastPosY = this.f_9766_.f_82480_;
+      this.lastPosZ = this.f_9766_.f_82481_;
+      this.lastYaw = f;
+      this.lastPitch = f1;
+      // CraftBukkit end
+
       this.f_9735_ = this.f_9746_;
-      this.f_9743_.m_19890_(p_143618_, p_143619_, p_143620_, p_143621_, p_143622_);
-      this.f_9743_.f_8906_.m_9829_(new ClientboundPlayerPositionPacket(p_143618_ - d0, p_143619_ - d1, p_143620_ - d2, p_143621_ - f, p_143622_ - f1, p_143623_, this.f_9767_, p_143624_));
+      this.f_9743_.m_19890_( p_143618_, p_143619_, p_143620_, p_143621_, p_143622_ );
+      this.f_9743_.f_8906_.m_9829_( new ClientboundPlayerPositionPacket( p_143618_ - d0, p_143619_ - d1, p_143620_ - d2, p_143621_ - f, p_143622_ - f1, p_143623_, this.f_9767_, p_143624_ ) );
    }
 
    public void m_7502_(ServerboundPlayerActionPacket p_9889_) {
@@ -1036,7 +_,7 @@
          Vec3 vec3 = blockhitresult.m_82450_();
          BlockPos blockpos = blockhitresult.m_82425_();
          Vec3 vec31 = Vec3.m_82512_(blockpos);
-         if (!(this.f_9743_.m_146892_().m_82557_(vec31) > f_215198_)) {
+         if (this.f_9743_.canInteractWith(blockpos, 3)) {
             Vec3 vec32 = vec3.m_82546_(vec31);
             double d0 = 1.0000001D;
             if (Math.abs(vec32.m_7096_()) < 1.0000001D && Math.abs(vec32.m_7098_()) < 1.0000001D && Math.abs(vec32.m_7094_()) < 1.0000001D) {
@@ -1044,7 +_,7 @@
                this.f_9743_.m_9243_();
                int i = this.f_9743_.f_19853_.m_151558_();
                if (blockpos.m_123342_() < i) {
-                  if (this.f_9766_ == null && this.f_9743_.m_20275_((double)blockpos.m_123341_() + 0.5D, (double)blockpos.m_123342_() + 0.5D, (double)blockpos.m_123343_() + 0.5D) < 64.0D && serverlevel.m_7966_(this.f_9743_, blockpos)) {
+                  if (this.f_9766_ == null && serverlevel.m_7966_(this.f_9743_, blockpos)) {
                      InteractionResult interactionresult = this.f_9743_.f_8941_.m_7179_(this.f_9743_, serverlevel, itemstack, interactionhand, blockhitresult);
                      if (direction == Direction.UP && !interactionresult.m_19077_() && blockpos.m_123342_() >= i - 1 && m_9790_(this.f_9743_, itemstack)) {
                         Component component = Component.m_237110_("build.tooHigh", i - 1).m_130940_(ChatFormatting.RED);
@@ -1173,6 +_,12 @@
    }
 
    public void m_7388_(ServerboundChatPacket p_9841_) {
+      // CraftBukkit start - async chat
+      // SPIGOT-3638
+      if (this.f_9745_.m_129918_()) {
+         return;
+      }
+      // CraftBukkit end
       if (m_215214_(p_9841_.f_133827_())) {
          this.m_9942_(Component.m_237115_("multiplayer.disconnect.illegal_characters"));
       } else {
@@ -1188,10 +_,13 @@
                }
 
                CompletableFuture<FilteredText> completablefuture = this.m_243132_(playerchatmessage.m_245728_());
-               CompletableFuture<Component> completablefuture1 = this.f_9745_.m_236742_().m_236961_(this.f_9743_, playerchatmessage.m_245692_());
+               CompletableFuture<Component> completablefuture1 = net.minecraftforge.common.ForgeHooks.getServerChatSubmittedDecorator().m_236961_(this.f_9743_, playerchatmessage.m_245692_());
                this.f_241681_.m_241849_((p_248212_) -> {
                   return CompletableFuture.allOf(completablefuture, completablefuture1).thenAcceptAsync((p_248218_) -> {
-                     PlayerChatMessage playerchatmessage1 = playerchatmessage.m_241956_(completablefuture1.join()).m_243072_(completablefuture.join().f_243010_());
+                     Component decoratedContent = completablefuture1.join();
+                     if (decoratedContent == null)
+                        return; // Forge: ServerChatEvent was canceled if this is null.
+                     PlayerChatMessage playerchatmessage1 = playerchatmessage.m_241956_(decoratedContent).m_243072_(completablefuture.join().f_243010_());
                      this.m_243086_(playerchatmessage1);
                   }, p_248212_);
                });
@@ -1201,6 +_,109 @@
       }
    }
 
+   // CraftBukkit start - add method
+   public void chat(String s, PlayerChatMessage original, boolean async) {
+      if (s.isEmpty() || this.f_9743_.m_9241_() == ChatVisiblity.HIDDEN) {
+         return;
+      }
+      OutgoingChatMessage outgoing = OutgoingChatMessage.m_247282_(original);
+      if (!async && s.startsWith("/")) {
+         this.handleCommand(s);
+      } else if (this.f_9743_.m_9241_() == ChatVisiblity.SYSTEM) {
+         // Do nothing, this is coming from a plugin
+      } else {
+         org.bukkit.entity.Player player = this.getCraftPlayer();
+         AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet(f_9745_));
+         String originalFormat = event.getFormat(), originalMessage = event.getMessage();
+         this.cserver.getPluginManager().callEvent(event);
+         if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            // Evil plugins still listening to deprecated event
+            final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
+            queueEvent.setCancelled(event.isCancelled());
+            Waitable waitable = new Waitable() {
+               @Override
+               protected Object evaluate() {
+                  org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
+                  if (queueEvent.isCancelled()) {
+                     return null;
+                  }
+                  String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                  if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
+                     if (originalFormat.equals(queueEvent.getFormat()) && originalMessage.equals(queueEvent.getMessage()) && queueEvent.getPlayer().getName().equalsIgnoreCase(queueEvent.getPlayer().getDisplayName())) {
+                        ServerGamePacketListenerImpl.this.f_9745_.m_6846_().m_243049_(original, ServerGamePacketListenerImpl.this.f_9743_, ChatType.m_240980_(ChatType.f_130598_, (Entity) ServerGamePacketListenerImpl.this.f_9743_));
+                        return null;
+                     } else if (CraftChatMessage.fromComponent(original.m_245692_()).equals(message)) {
+                        ServerGamePacketListenerImpl.this.f_9745_.m_6846_().m_243049_(original, ServerGamePacketListenerImpl.this.f_9743_, ChatType.m_240980_(ChatType.RAW, (Entity) ServerGamePacketListenerImpl.this.f_9743_));
+                        return null;
+                     }
+                     for (ServerPlayer recipient : f_9745_.m_6846_().f_11196_) {
+                        recipient.getBukkitEntity().sendMessage(ServerGamePacketListenerImpl.this.f_9743_.m_20148_(), message);
+                     }
+                  } else {
+                     for (org.bukkit.entity.Player player : queueEvent.getRecipients()) {
+                        player.sendMessage(ServerGamePacketListenerImpl.this.f_9743_.m_20148_(), message);
+                     }
+                  }
+                  ServerGamePacketListenerImpl.this.f_9745_.console.sendMessage(message);
+                  return null;
+               }};
+            if (async) {
+               f_9745_.processQueue.add(waitable);
+            } else {
+               waitable.run();
+            }
+            try {
+               waitable.get();
+            } catch (InterruptedException e) {
+               Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+            } catch (ExecutionException e) {
+               throw new RuntimeException("Exception processing chat event", e.getCause());
+            }
+         } else {
+            if (event.isCancelled()) {
+               return;
+            }
+            s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
+            if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
+               if (originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) {
+                  ServerGamePacketListenerImpl.this.f_9745_.m_6846_().m_243049_(original, ServerGamePacketListenerImpl.this.f_9743_, ChatType.m_240980_(ChatType.f_130598_, (Entity) ServerGamePacketListenerImpl.this.f_9743_));
+                  return;
+               } else if (CraftChatMessage.fromComponent(original.m_245692_()).equals(s)) {
+                  ServerGamePacketListenerImpl.this.f_9745_.m_6846_().m_243049_(original, ServerGamePacketListenerImpl.this.f_9743_, ChatType.m_240980_(ChatType.RAW, (Entity) ServerGamePacketListenerImpl.this.f_9743_));
+                  return;
+               }
+               for (ServerPlayer recipient : f_9745_.m_6846_().f_11196_) {
+                  recipient.getBukkitEntity().sendMessage(ServerGamePacketListenerImpl.this.f_9743_.m_20148_(), s);
+               }
+            } else {
+               for (org.bukkit.entity.Player recipient : event.getRecipients()) {
+                  recipient.sendMessage(ServerGamePacketListenerImpl.this.f_9743_.m_20148_(), s);
+               }
+            }
+            f_9745_.console.sendMessage(s);
+         }
+      }
+   }
+   private void handleCommand(String s) {
+      this.f_9744_.info(this.f_9743_.m_6302_() + " issued server command: " + s);
+      CraftPlayer player = this.getCraftPlayer();
+      PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(f_9745_));
+      this.cserver.getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return;
+      }
+      try {
+         if (this.cserver.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
+            return;
+         }
+      } catch (org.bukkit.command.CommandException ex) {
+         player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
+         java.util.logging.Logger.getLogger(ServerConnectionListener.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+         return;
+      }
+   }
+   // CraftBukkit end
+
    public void m_214047_(ServerboundChatCommandPacket p_215225_) {
       if (m_215214_(p_215225_.f_237922_())) {
          this.m_9942_(Component.m_237115_("multiplayer.disconnect.illegal_characters"));
@@ -1217,11 +_,21 @@
    }
 
    private void m_246958_(ServerboundChatCommandPacket p_251139_, LastSeenMessages p_250484_) {
-      ParseResults<CommandSourceStack> parseresults = this.m_242658_(p_251139_.f_237922_());
+      // CraftBukkit start
+      String command = "/" + p_251139_.f_237922_();
+      ServerGamePacketListenerImpl.f_9744_.info(this.f_9743_.m_6302_() + " issued server command: " + command);
+      PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(getCraftPlayer(), command, new LazyPlayerSet(f_9745_));
+      this.cserver.getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return;
+      }
+      command = event.getMessage().substring(1);
+      ParseResults<CommandSourceStack> parseresults = this.m_242658_(command);
+      // CraftBukkit end
 
       Map<String, PlayerChatMessage> map;
       try {
-         map = this.m_246206_(p_251139_, SignableCommand.m_246497_(parseresults), p_250484_);
+         map = (p_251139_.f_237922_().equals(command)) ? this.m_246206_(p_251139_, SignableCommand.m_246497_(parseresults), p_250484_) : Collections.emptyMap(); // CraftBukkit
       } catch (SignedMessageChain.DecodeException signedmessagechain$decodeexception) {
          this.m_246889_(signedmessagechain$decodeexception);
          return;
@@ -1231,7 +_,7 @@
       parseresults = Commands.m_242611_(parseresults, (p_242749_) -> {
          return p_242749_.m_230893_(commandsigningcontext);
       });
-      this.f_9745_.m_129892_().m_242674_(parseresults, p_251139_.f_237922_());
+      this.f_9745_.m_129892_().m_242674_(parseresults, command); // CraftBukkit
    }
 
    private void m_246889_(SignedMessageChain.DecodeException p_252068_) {
@@ -1315,7 +_,24 @@
    }
 
    private void m_243086_(PlayerChatMessage p_243277_) {
-      this.f_9745_.m_6846_().m_243049_(p_243277_, this.f_9743_, ChatType.m_240980_(ChatType.f_130598_, this.f_9743_));
+      // CraftBukkit start
+      String s = p_243277_.m_245728_();
+      if (s.isEmpty()) {
+         f_9744_.warn(this.f_9743_.m_6302_() + " tried to send an empty message");
+      } else if (getCraftPlayer().isConversing()) {
+         final String conversationInput = s;
+         this.f_9745_.processQueue.add(new Runnable() {
+            @Override
+            public void run() {
+               getCraftPlayer().acceptConversationInput(conversationInput);
+            }
+         });
+      } else if (this.f_9743_.m_9241_() == ChatVisiblity.SYSTEM) { // Re-add "Command Only" flag check
+         this.m_9829_(new ClientboundSystemChatPacket(Component.m_237115_("chat.cannotSend").m_130940_(ChatFormatting.RED), false));
+      } else {
+         this.chat(s, p_243277_, true);
+      }
+      // CraftBukkit end
       this.m_215251_();
    }
 
@@ -1434,9 +_,10 @@
             return;
          }
 
-         if (entity.m_20238_(this.f_9743_.m_146892_()) < f_215198_) {
+         if (true) { //Forge: Perform distance checks below since interactions and attacks differ.
             p_9866_.m_179617_(new ServerboundInteractPacket.Handler() {
-               private void m_143678_(InteractionHand p_143679_, ServerGamePacketListenerImpl.EntityInteraction p_143680_) {
+               private void performInteraction(InteractionHand p_143679_, ServerGamePacketListenerImpl.EntityInteraction p_143680_) {
+                  if(!ServerGamePacketListenerImpl.this.f_9743_.canInteractWith(entity, 1.5D)) return; //Forge: If the entity cannot be reached, do nothing. Original check was dist < 6, range is 4.5, so vanilla used padding=1.5
                   ItemStack itemstack = ServerGamePacketListenerImpl.this.f_9743_.m_21120_(p_143679_);
                   if (itemstack.m_246617_(serverlevel.m_246046_())) {
                      ItemStack itemstack1 = itemstack.m_41777_();
@@ -1452,11 +_,13 @@
                }
 
                public void m_142299_(InteractionHand p_143677_) {
-                  this.m_143678_(p_143677_, Player::m_36157_);
+                  this.performInteraction(p_143677_, Player::m_36157_);
                }
 
                public void m_142143_(InteractionHand p_143682_, Vec3 p_143683_) {
-                  this.m_143678_(p_143682_, (p_143686_, p_143687_, p_143688_) -> {
+                  this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> {
+                     InteractionResult onInteractEntityAtResult = net.minecraftforge.common.ForgeHooks.onInteractEntityAt(f_9743_, entity, p_143683_, p_143682_);
+                     if (onInteractEntityAtResult != null) return onInteractEntityAtResult;
                      return p_143687_.m_7111_(p_143686_, p_143683_, p_143688_);
                   });
                }
@@ -1465,6 +_,8 @@
                   if (!(entity instanceof ItemEntity) && !(entity instanceof ExperienceOrb) && !(entity instanceof AbstractArrow) && entity != ServerGamePacketListenerImpl.this.f_9743_) {
                      ItemStack itemstack = ServerGamePacketListenerImpl.this.f_9743_.m_21120_(InteractionHand.MAIN_HAND);
                      if (itemstack.m_246617_(serverlevel.m_246046_())) {
+                     //Forge: Perform attack range check. Original check was dist < 6, range is 3, so vanilla used padding=3
+                     if(ServerGamePacketListenerImpl.this.f_9743_.canHit(entity, 3))
                         ServerGamePacketListenerImpl.this.f_9743_.m_5706_(entity);
                      }
                   } else {
@@ -1669,6 +_,7 @@
    }
 
    public void m_7423_(ServerboundCustomPayloadPacket p_9860_) {
+      net.minecraftforge.network.NetworkHooks.onCustomPayload(p_9860_, this.f_9742_);
    }
 
    public void m_7477_(ServerboundChangeDifficultyPacket p_9839_) {
@@ -1718,6 +_,17 @@
 
    public ServerPlayer m_142253_() {
       return this.f_9743_;
+   }
+
+   // Magma - stub
+   public void disconnect(String s) {
+   }
+
+   public void teleport(Location to) {
+   }
+
+   public boolean isDisconnected() {
+      return false;
    }
 
    @FunctionalInterface
