--- a/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -4,12 +_,20 @@
 import net.minecraft.network.Connection;
 import net.minecraft.network.ConnectionProtocol;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
 import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.server.MinecraftServer;
 
+import java.net.InetAddress;
+import java.util.HashMap;
+
 public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketListener {
+   // CraftBukkit start - add fields
+   private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+   private static int throttleCounter = 0;
+   // CraftBukkit end
    private static final Component f_9964_ = Component.m_237113_("Ignoring status request");
    private final MinecraftServer f_9965_;
    private final Connection f_9966_;
@@ -20,9 +_,42 @@
    }
 
    public void m_7322_(ClientIntentionPacket p_9975_) {
+      this.f_9966_.hostname = p_9975_.f_134721_ + ":" + p_9975_.f_134722_; // CraftBukkit  - set hostname
+      if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerLogin(p_9975_, this.f_9966_)) return;
       switch (p_9975_.m_134735_()) {
          case LOGIN:
             this.f_9966_.m_129498_(ConnectionProtocol.LOGIN);
+            // CraftBukkit start - Connection throttle
+            try {
+               long currentTime = System.currentTimeMillis();
+               long connectionThrottle = this.f_9965_.server.getConnectionThrottle();
+               InetAddress address = ((java.net.InetSocketAddress) this.f_9966_.m_129523_()).getAddress();
+               synchronized (throttleTracker) {
+                  if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.get(address) < connectionThrottle) {
+                     throttleTracker.put(address, currentTime);
+                     MutableComponent chatmessage = Component.m_237113_("Connection throttled! Please wait before reconnecting.");
+                     this.f_9966_.m_129512_(new ClientboundLoginDisconnectPacket(chatmessage));
+                     this.f_9966_.m_129507_(chatmessage);
+                     return;
+                  }
+                  throttleTracker.put(address, currentTime);
+                  throttleCounter++;
+                  if (throttleCounter > 200) {
+                     throttleCounter = 0;
+                     // Cleanup stale entries
+                     java.util.Iterator iter = throttleTracker.entrySet().iterator();
+                     while (iter.hasNext()) {
+                        java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
+                        if (entry.getValue() > connectionThrottle) {
+                           iter.remove();
+                        }
+                     }
+                  }
+               }
+            } catch (Throwable t) {
+               org.apache.logging.log4j.LogManager.getLogger().debug("Failed to check connection throttle", t);
+            }
+            // CraftBukkit end
             if (p_9975_.m_134738_() != SharedConstants.m_183709_().getProtocolVersion()) {
                Component component;
                if (p_9975_.m_134738_() < 754) {
