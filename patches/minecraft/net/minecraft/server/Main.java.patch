--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -1,7 +_,9 @@
 package net.minecraft.server;
 
+import com.google.common.base.Charsets;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+import com.mojang.bridge.game.PackType;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
@@ -9,11 +_,14 @@
 import com.mojang.serialization.Lifecycle;
 import java.awt.GraphicsEnvironment;
 import java.io.File;
+import java.io.InputStreamReader;
 import java.net.Proxy;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.Arrays;
 import java.util.Optional;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
@@ -55,200 +_,356 @@
 import net.minecraft.world.level.storage.LevelSummary;
 import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.storage.WorldData;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.magmafoundation.magma.protect.InjectProtect;
 import org.slf4j.Logger;
+import org.spongepowered.asm.mixin.throwables.MixinError;
 
 public class Main {
-   private static final Logger f_129670_ = LogUtils.getLogger();
-
-   @DontObfuscate
-   public static void main(String[] p_129699_) {
-      SharedConstants.m_142977_();
-      OptionParser optionparser = new OptionParser();
-      OptionSpec<Void> optionspec = optionparser.accepts("nogui");
-      OptionSpec<Void> optionspec1 = optionparser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
-      OptionSpec<Void> optionspec2 = optionparser.accepts("demo");
-      OptionSpec<Void> optionspec3 = optionparser.accepts("bonusChest");
-      OptionSpec<Void> optionspec4 = optionparser.accepts("forceUpgrade");
-      OptionSpec<Void> optionspec5 = optionparser.accepts("eraseCache");
-      OptionSpec<Void> optionspec6 = optionparser.accepts("safeMode", "Loads level with vanilla datapack only");
-      OptionSpec<Void> optionspec7 = optionparser.accepts("help").forHelp();
-      OptionSpec<String> optionspec8 = optionparser.accepts("singleplayer").withRequiredArg();
-      OptionSpec<String> optionspec9 = optionparser.accepts("universe").withRequiredArg().defaultsTo(".");
-      OptionSpec<String> optionspec10 = optionparser.accepts("world").withRequiredArg();
-      OptionSpec<Integer> optionspec11 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
-      OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
-      OptionSpec<Void> optionspec13 = optionparser.accepts("jfrProfile");
-      OptionSpec<String> optionspec14 = optionparser.nonOptions();
-
-      try {
-         OptionSet optionset = optionparser.parse(p_129699_);
-         if (optionset.has(optionspec7)) {
-            optionparser.printHelpOn(System.err);
-            return;
-         }
-
-         CrashReport.m_127529_();
-         if (optionset.has(optionspec13)) {
-            JvmProfiler.f_185340_.m_183425_(Environment.SERVER);
-         }
-
-         Bootstrap.m_135870_();
-         Bootstrap.m_135889_();
-         Util.m_137584_();
-         Path path = Paths.get("server.properties");
-         DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(path);
-         dedicatedserversettings.m_139780_();
-         Path path1 = Paths.get("eula.txt");
-         Eula eula = new Eula(path1);
-         if (optionset.has(optionspec1)) {
-            f_129670_.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
-            return;
-         }
-
-         if (!eula.m_135944_()) {
-            f_129670_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            return;
-         }
-
-         File file1 = new File(optionset.valueOf(optionspec9));
-         Services services = Services.m_214344_(new YggdrasilAuthenticationService(Proxy.NO_PROXY), file1);
-         String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(dedicatedserversettings.m_139777_().f_139741_);
-         LevelStorageSource levelstoragesource = LevelStorageSource.m_78242_(file1.toPath());
-         LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.m_78260_(s);
-         LevelSummary levelsummary = levelstoragesource$levelstorageaccess.m_78308_();
-         if (levelsummary != null) {
-            if (levelsummary.m_193020_()) {
-               f_129670_.info("This world must be opened in an older version (like 1.6.4) to be safely converted");
-               return;
-            }
-
-            if (!levelsummary.m_193021_()) {
-               f_129670_.info("This world was created by an incompatible version.");
-               return;
-            }
-         }
-
-         boolean flag = optionset.has(optionspec6);
-         if (flag) {
-            f_129670_.warn("Safe mode active, only vanilla datapack will be loaded");
-         }
-
-         PackRepository packrepository = ServerPacksSource.m_245786_(levelstoragesource$levelstorageaccess.m_78283_(LevelResource.f_78180_));
-
-         WorldStem worldstem;
-         try {
-            WorldLoader.InitConfig worldloader$initconfig = m_245383_(dedicatedserversettings.m_139777_(), levelstoragesource$levelstorageaccess, flag, packrepository);
-            worldstem = Util.m_214679_((p_248086_) -> {
-               return WorldLoader.m_214362_(worldloader$initconfig, (p_248079_) -> {
-                  Registry<LevelStem> registry = p_248079_.f_243759_().m_175515_(Registries.f_256862_);
-                  DynamicOps<Tag> dynamicops = RegistryOps.m_255058_(NbtOps.f_128958_, p_248079_.f_244104_());
-                  Pair<WorldData, WorldDimensions.Complete> pair = levelstoragesource$levelstorageaccess.m_246049_(dynamicops, p_248079_.f_244127_(), registry, p_248079_.f_244104_().m_211816_());
-                  if (pair != null) {
-                     return new WorldLoader.DataLoadOutput<>(pair.getFirst(), pair.getSecond().m_245593_());
-                  } else {
-                     LevelSettings levelsettings;
-                     WorldOptions worldoptions;
-                     WorldDimensions worlddimensions;
-                     if (optionset.has(optionspec2)) {
-                        levelsettings = MinecraftServer.f_129743_;
-                        worldoptions = WorldOptions.f_244225_;
-                        worlddimensions = WorldPresets.m_246552_(p_248079_.f_244104_());
-                     } else {
-                        DedicatedServerProperties dedicatedserverproperties = dedicatedserversettings.m_139777_();
-                        levelsettings = new LevelSettings(dedicatedserverproperties.f_139741_, dedicatedserverproperties.f_139740_, dedicatedserverproperties.f_139752_, dedicatedserverproperties.f_139739_, false, new GameRules(), p_248079_.f_244127_());
-                        worldoptions = optionset.has(optionspec3) ? dedicatedserverproperties.f_243824_.m_247325_(true) : dedicatedserverproperties.f_243824_;
-                        worlddimensions = dedicatedserverproperties.m_246483_(p_248079_.f_244104_());
-                     }
-
-                     WorldDimensions.Complete worlddimensions$complete = worlddimensions.m_245300_(registry);
-                     Lifecycle lifecycle = worlddimensions$complete.m_245945_().add(p_248079_.f_244104_().m_211816_());
-                     return new WorldLoader.DataLoadOutput<>(new PrimaryLevelData(levelsettings, worldoptions, worlddimensions$complete.f_244634_(), lifecycle), worlddimensions$complete.m_245593_());
-                  }
-               }, WorldStem::new, Util.m_183991_(), p_248086_);
-            }).get();
-         } catch (Exception exception) {
-            f_129670_.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", (Throwable)exception);
-            return;
-         }
-
-         RegistryAccess.Frozen registryaccess$frozen = worldstem.f_244542_().m_247579_();
-         if (optionset.has(optionspec4)) {
-            m_195488_(levelstoragesource$levelstorageaccess, DataFixers.m_14512_(), optionset.has(optionspec5), () -> {
-               return true;
+  private static final Logger f_129670_ = LogUtils.getLogger();
+
+  @DontObfuscate
+  public static void main(String[] p_129699_) {
+    SharedConstants.m_142977_();
+    OptionParser optionparser = new OptionParser();
+    OptionSpec<Void> optionspec = optionparser.accepts("nogui");
+    OptionSpec<Void> optionspec1 =
+        optionparser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
+    OptionSpec<Void> optionspec2 = optionparser.accepts("demo");
+    OptionSpec<Void> optionspec3 = optionparser.accepts("bonusChest");
+    OptionSpec<Void> optionspec4 = optionparser.accepts("forceUpgrade");
+    OptionSpec<Void> optionspec5 = optionparser.accepts("eraseCache");
+    OptionSpec<Void> optionspec6 = optionparser.accepts("safeMode", "Loads level with vanilla datapack only");
+    OptionSpec<Void> optionspec7 = optionparser.accepts("help").forHelp();
+    OptionSpec<String> optionspec8 = optionparser.accepts("singleplayer").withRequiredArg();
+    OptionSpec<String> optionspec9 = optionparser.accepts("universe").withRequiredArg().defaultsTo(".");
+    OptionSpec<String> optionspec10 = optionparser.accepts("world").withRequiredArg();
+    OptionSpec<Integer> optionspec11 =
+        optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
+    OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
+    OptionSpec<Void> optionspec13 = optionparser.accepts("jfrProfile");
+    OptionSpec<String> optionspec14 = optionparser.nonOptions();
+    optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class)
+        .defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+    optionparser.accepts("gameDir").withRequiredArg().ofType(File.class)
+        .defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
+    final OptionSpec<net.minecraft.core.BlockPos> spawnPosOpt;
+    boolean gametestEnabled = Boolean.getBoolean("forge.gameTestServer");
+    if (gametestEnabled) {
+      spawnPosOpt = optionparser.accepts("spawnPos").withRequiredArg()
+          .withValuesConvertedBy(new net.minecraftforge.gametest.BlockPosValueConverter())
+          .defaultsTo(new net.minecraft.core.BlockPos(0, 60, 0));
+    } else {
+      spawnPosOpt = null;
+    }
+
+    optionparser.acceptsAll(Arrays.asList("b", "bukkit-settings"), "File for bukkit settings")
+        .withRequiredArg()
+        .ofType(File.class)
+        .defaultsTo(new File("bukkit.yml"))
+        .describedAs("Yml file");
+
+    optionparser.acceptsAll(Arrays.asList("S", "spigot-settings"), "File for spigot settings")
+        .withRequiredArg()
+        .ofType(File.class)
+        .defaultsTo(new File("spigot.yml"))
+        .describedAs("Yml file");
+
+    optionparser.acceptsAll(Arrays.asList("C", "commands-settings"), "File for command settings")
+        .withRequiredArg()
+        .ofType(File.class)
+        .defaultsTo(new File("commands.yml"))
+        .describedAs("Yml file");
+
+    optionparser.acceptsAll(Arrays.asList("P", "plugins"), "Plugin directory to use")
+        .withRequiredArg()
+        .ofType(File.class)
+        .defaultsTo(new File("plugins"))
+        .describedAs("Plugin directory");
+
+    try {
+      OptionSet optionset = optionparser.parse(p_129699_);
+      if (optionset.has(optionspec7)) {
+        optionparser.printHelpOn(System.err);
+        return;
+      }
+      Path path1 = Paths.get("eula.txt");
+      Eula eula = new Eula(path1);
+
+      // Spigot Start
+      boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
+      if ( eulaAgreed )
+      {
+        System.err.println( "You have used the Spigot command line EULA agreement flag." );
+        System.err.println( "By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula)." );
+        System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
+      }
+      // Spigot End
+      if (!eula.m_135944_() && !eulaAgreed) { // Spigot
+        f_129670_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+        return;
+      }
+
+      CrashReport.m_127529_();
+      if (optionset.has(optionspec13)) {
+        JvmProfiler.f_185340_.m_183425_(Environment.SERVER);
+      }
+
+      //Magma start - Boot Inject Protection
+      InjectProtect.init();
+
+      try {
+        Bootstrap.m_135870_();
+      } catch (MixinError e) {
+        InjectProtect.onBootErrorCaught(e);
+      }
+      //Magma end
+      Bootstrap.m_135889_();
+      Util.m_137584_();
+      if (!optionset.has(optionspec1)) {
+        net.minecraftforge.server.loading.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
+      }
+      Path path = Paths.get("server.properties");
+      DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(path);
+      dedicatedserversettings.m_139780_();
+      if (optionset.has(optionspec1)) {
+        // CraftBukkit start - SPIGOT-5761: Create bukkit.yml and commands.yml if not present
+        File configFile = (File) optionset.valueOf("bukkit-settings");
+        YamlConfiguration configuration = YamlConfiguration.loadConfiguration(configFile);
+        configuration.options().copyDefaults(true);
+        configuration.setDefaults(YamlConfiguration.loadConfiguration(
+            new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/bukkit.yml"),
+                Charsets.UTF_8)));
+        configuration.save(configFile);
+
+        File commandFile = (File) optionset.valueOf("commands-settings");
+        YamlConfiguration commandsConfiguration = YamlConfiguration.loadConfiguration(commandFile);
+        commandsConfiguration.options().copyDefaults(true);
+        commandsConfiguration.setDefaults(YamlConfiguration.loadConfiguration(
+            new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/commands.yml"),
+                Charsets.UTF_8)));
+        commandsConfiguration.save(commandFile);
+        // CraftBukkit end
+        f_129670_.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
+        return;
+      }
+
+      File file1 = new File(optionset.valueOf(optionspec9));
+      Services services = Services.m_214344_(new YggdrasilAuthenticationService(Proxy.NO_PROXY), file1);
+      String s = Optional.ofNullable(optionset.valueOf(optionspec10))
+          .orElse(dedicatedserversettings.m_139777_().f_139741_);
+      if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+        f_129670_.error(
+            "Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+        return;
+      }
+      LevelStorageSource levelstoragesource = LevelStorageSource.m_78242_(file1.toPath());
+      LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess =
+          levelstoragesource.createAccess(s, LevelStem.f_63971_);
+      levelstoragesource$levelstorageaccess.readAdditionalLevelSaveData();
+      LevelSummary levelsummary = levelstoragesource$levelstorageaccess.m_78308_();
+      if (levelsummary != null) {
+        if (levelsummary.m_193020_()) {
+          f_129670_.info("This world must be opened in an older version (like 1.6.4) to be safely converted");
+          return;
+        }
+
+        if (!levelsummary.m_193021_()) {
+          f_129670_.info("This world was created by an incompatible version.");
+          return;
+        }
+      }
+
+      boolean flag = optionset.has(optionspec6);
+      if (flag) {
+        f_129670_.warn("Safe mode active, only vanilla datapack will be loaded");
+      }
+
+      PackRepository packrepository = ServerPacksSource.m_245786_(
+          levelstoragesource$levelstorageaccess.m_78283_(LevelResource.f_78180_));
+
+      // CraftBukkit start
+      File bukkitDataPackFolder =
+          new File(levelstoragesource$levelstorageaccess.m_78283_(LevelResource.f_78180_).toFile(), "bukkit");
+      if (!bukkitDataPackFolder.exists()) {
+        bukkitDataPackFolder.mkdirs();
+      }
+      File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
+      try {
+        com.google.common.io.Files.write("{\n"
+            + "    \"pack\": {\n"
+            + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
+            + "        \"pack_format\": " + SharedConstants.m_183709_().getPackVersion(PackType.DATA) + "\n"
+            + "    }\n"
+            + "}\n", mcMeta, com.google.common.base.Charsets.UTF_8);
+      } catch (java.io.IOException ex) {
+        throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+      }
+      AtomicReference<WorldLoader.DataLoadContext> worldLoader = new AtomicReference<>();
+      // CraftBukkit end
+
+      WorldStem worldstem;
+      try {
+        WorldLoader.InitConfig worldloader$initconfig =
+            m_245383_(dedicatedserversettings.m_139777_(), levelstoragesource$levelstorageaccess, flag,
+                packrepository);
+        worldstem = Util.m_214679_((p_248086_) -> {
+          return WorldLoader.m_214362_(worldloader$initconfig, (p_248079_) -> {
+            worldLoader.set(p_248079_);
+            Registry<LevelStem> registry = p_248079_.f_243759_().m_175515_(Registries.f_256862_);
+            DynamicOps<Tag> dynamicops = RegistryOps.m_255058_(NbtOps.f_128958_, p_248079_.f_244104_());
+            Pair<WorldData, WorldDimensions.Complete> pair =
+                levelstoragesource$levelstorageaccess.m_246049_(dynamicops, p_248079_.f_244127_(), registry,
+                    p_248079_.f_244104_().m_211816_());
+            if (pair != null) {
+              return new WorldLoader.DataLoadOutput<>(pair.getFirst(), pair.getSecond().m_245593_());
+            } else {
+              LevelSettings levelsettings;
+              WorldOptions worldoptions;
+              WorldDimensions worlddimensions;
+              if (optionset.has(optionspec2)) {
+                levelsettings = MinecraftServer.f_129743_;
+                worldoptions = WorldOptions.f_244225_;
+                worlddimensions = WorldPresets.m_246552_(p_248079_.f_244104_());
+              } else {
+                DedicatedServerProperties dedicatedserverproperties = dedicatedserversettings.m_139777_();
+                levelsettings =
+                    new LevelSettings(dedicatedserverproperties.f_139741_, dedicatedserverproperties.f_139740_,
+                        dedicatedserverproperties.f_139752_, dedicatedserverproperties.f_139739_, false,
+                        new GameRules(), p_248079_.f_244127_());
+                worldoptions =
+                    optionset.has(optionspec3) ? dedicatedserverproperties.f_243824_.m_247325_(true) :
+                        dedicatedserverproperties.f_243824_;
+                worlddimensions = dedicatedserverproperties.m_246483_(p_248079_.f_244104_());
+              }
+
+              //Forge: Do a write-read-cycle to inject modded dimensions on first start of a dedicated server into its generated world dimensions list.
+              worlddimensions = WorldDimensions.f_243810_.encoder().encodeStart(dynamicops, worlddimensions).flatMap(
+                      (writtenPayloadWithModdedDimensions) -> WorldDimensions.f_243810_.decoder()
+                          .parse(dynamicops, writtenPayloadWithModdedDimensions)).resultOrPartial(f_129670_::error)
+                  .orElse(worlddimensions);
+              WorldDimensions.Complete worlddimensions$complete = worlddimensions.m_245300_(registry);
+              Lifecycle lifecycle =
+                  worlddimensions$complete.m_245945_().add(p_248079_.f_244104_().m_211816_());
+              return new WorldLoader.DataLoadOutput<>(
+                  new PrimaryLevelData(levelsettings, worldoptions, worlddimensions$complete.f_244634_(),
+                      lifecycle), worlddimensions$complete.m_245593_());
+            }
+          }, WorldStem::new, Util.m_183991_(), p_248086_);
+        }).get();
+      } catch (Exception exception) {
+        f_129670_.warn(
+            "Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode",
+            (Throwable) exception);
+        return;
+      }
+
+      RegistryAccess.Frozen registryaccess$frozen = worldstem.f_244542_().m_247579_();
+      if (optionset.has(optionspec4)) {
+        m_195488_(levelstoragesource$levelstorageaccess, DataFixers.m_14512_(), optionset.has(optionspec5),
+            () -> {
+              return true;
             }, registryaccess$frozen.m_175515_(Registries.f_256862_));
-         }
-
-         WorldData worlddata = worldstem.f_206895_();
-         levelstoragesource$levelstorageaccess.m_78287_(registryaccess$frozen, worlddata);
-         final DedicatedServer dedicatedserver = MinecraftServer.m_129872_((p_236710_) -> {
-            DedicatedServer dedicatedserver1 = new DedicatedServer(p_236710_, levelstoragesource$levelstorageaccess, packrepository, worldstem, dedicatedserversettings, DataFixers.m_14512_(), services, LoggerChunkProgressListener::new);
-            dedicatedserver1.m_236740_(optionset.has(optionspec8) ? new GameProfile((UUID)null, optionset.valueOf(optionspec8)) : null);
-            dedicatedserver1.m_129801_(optionset.valueOf(optionspec11));
-            dedicatedserver1.m_129975_(optionset.has(optionspec2));
-            dedicatedserver1.m_129948_(optionset.valueOf(optionspec12));
-            boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec14).contains("nogui");
-            if (flag1 && !GraphicsEnvironment.isHeadless()) {
-               dedicatedserver1.m_139667_();
-            }
-
-            return dedicatedserver1;
-         });
-         Thread thread = new Thread("Server Shutdown Thread") {
-            public void run() {
-               dedicatedserver.m_7570_(true);
-            }
-         };
-         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_129670_));
-         Runtime.getRuntime().addShutdownHook(thread);
-      } catch (Exception exception1) {
-         f_129670_.error(LogUtils.FATAL_MARKER, "Failed to start the minecraft server", (Throwable)exception1);
-      }
-
-   }
-
-   private static WorldLoader.InitConfig m_245383_(DedicatedServerProperties p_248563_, LevelStorageSource.LevelStorageAccess p_251359_, boolean p_249093_, PackRepository p_251069_) {
-      WorldDataConfiguration worlddataconfiguration = p_251359_.m_247706_();
-      WorldDataConfiguration worlddataconfiguration1;
-      boolean flag;
-      if (worlddataconfiguration != null) {
-         flag = false;
-         worlddataconfiguration1 = worlddataconfiguration;
+      }
+
+      WorldData worlddata = worldstem.f_206895_();
+      levelstoragesource$levelstorageaccess.m_78287_(registryaccess$frozen, worlddata);
+      final MinecraftServer dedicatedserver = MinecraftServer.m_129872_((p_129697_) -> {
+        MinecraftServer dedicatedserver1;
+        if (gametestEnabled) {
+          net.minecraftforge.gametest.ForgeGameTestHooks.registerGametests();
+          java.util.Collection<net.minecraft.gametest.framework.GameTestBatch> testBatches =
+              net.minecraft.gametest.framework.GameTestRunner.m_127724_(
+                  net.minecraft.gametest.framework.GameTestRegistry.m_127658_());
+          net.minecraft.core.BlockPos spawnPos = optionset.valueOf(spawnPosOpt);
+          dedicatedserver1 =
+              new net.minecraft.gametest.framework.GameTestServer(p_129697_, levelstoragesource$levelstorageaccess,
+                  packrepository, worldstem, testBatches, spawnPos);
+        } else {
+          dedicatedserver1 =
+              new DedicatedServer(optionset, worldLoader.get(), p_129697_, levelstoragesource$levelstorageaccess,
+                  packrepository, worldstem, dedicatedserversettings, DataFixers.m_14512_(), services,
+                  LoggerChunkProgressListener::new);
+        }
+        dedicatedserver1.m_236740_(
+            optionset.has(optionspec8) ? new GameProfile((UUID) null, optionset.valueOf(optionspec8)) : null);
+        dedicatedserver1.m_129801_(optionset.valueOf(optionspec11));
+        dedicatedserver1.m_129975_(optionset.has(optionspec2));
+        dedicatedserver1.m_129948_(optionset.valueOf(optionspec12));
+        boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec14).contains("nogui");
+        if (dedicatedserver1 instanceof DedicatedServer dedicatedServer && flag1 && !GraphicsEnvironment.isHeadless()) {
+          //dedicatedServer.showGui(); //MAGMA: Disabled GUI for now
+        }
+
+        return dedicatedserver1;
+      });
+      Thread thread = new Thread("Server Shutdown Thread") {
+        public void run() {
+          InjectProtect.shutdownCalled(); //Magma - Mixin Inject protection
+          // FORGE: Halting as GameTestServer will cause issues as it always calls System#exit on both crash and normal exit, so skip it
+          if (!(dedicatedserver instanceof net.minecraft.gametest.framework.GameTestServer)) {
+            dedicatedserver.m_7570_(true);
+          }
+          org.apache.logging.log4j.LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
+        }
+      };
+      thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_129670_));
+      Runtime.getRuntime().addShutdownHook(thread);
+    } catch (Exception exception1) {
+      f_129670_.error(LogUtils.FATAL_MARKER, "Failed to start the minecraft server", (Throwable) exception1);
+    }
+
+  }
+
+  private static WorldLoader.InitConfig m_245383_(DedicatedServerProperties p_248563_,
+                                                           LevelStorageSource.LevelStorageAccess p_251359_,
+                                                           boolean p_249093_, PackRepository p_251069_) {
+    WorldDataConfiguration worlddataconfiguration = p_251359_.m_247706_();
+    WorldDataConfiguration worlddataconfiguration1;
+    boolean flag;
+    if (worlddataconfiguration != null) {
+      flag = false;
+      worlddataconfiguration1 = worlddataconfiguration;
+    } else {
+      flag = true;
+      worlddataconfiguration1 =
+          new WorldDataConfiguration(p_248563_.f_243997_, FeatureFlags.f_244332_);
+    }
+
+    WorldLoader.PackConfig worldloader$packconfig =
+        new WorldLoader.PackConfig(p_251069_, worlddataconfiguration1, p_249093_, flag);
+    return new WorldLoader.InitConfig(worldloader$packconfig, Commands.CommandSelection.DEDICATED,
+        p_248563_.f_139711_);
+  }
+
+  public static void m_195488_(LevelStorageSource.LevelStorageAccess p_195489_, DataFixer p_195490_,
+                                  boolean p_195491_, BooleanSupplier p_195492_, Registry<LevelStem> p_250443_) {
+    f_129670_.info("Forcing world upgrade!");
+    WorldUpgrader worldupgrader = new WorldUpgrader(p_195489_, p_195490_, p_250443_, p_195491_);
+    Component component = null;
+
+    while (!worldupgrader.m_18829_()) {
+      Component component1 = worldupgrader.m_18837_();
+      if (component != component1) {
+        component = component1;
+        f_129670_.info(worldupgrader.m_18837_().getString());
+      }
+
+      int i = worldupgrader.m_18834_();
+      if (i > 0) {
+        int j = worldupgrader.m_18835_() + worldupgrader.m_18836_();
+        f_129670_.info("{}% completed ({} / {} chunks)...", Mth.m_14143_((float) j / (float) i * 100.0F), j, i);
+      }
+
+      if (!p_195492_.getAsBoolean()) {
+        worldupgrader.m_18820_();
       } else {
-         flag = true;
-         worlddataconfiguration1 = new WorldDataConfiguration(p_248563_.f_243997_, FeatureFlags.f_244332_);
-      }
-
-      WorldLoader.PackConfig worldloader$packconfig = new WorldLoader.PackConfig(p_251069_, worlddataconfiguration1, p_249093_, flag);
-      return new WorldLoader.InitConfig(worldloader$packconfig, Commands.CommandSelection.DEDICATED, p_248563_.f_139711_);
-   }
-
-   public static void m_195488_(LevelStorageSource.LevelStorageAccess p_195489_, DataFixer p_195490_, boolean p_195491_, BooleanSupplier p_195492_, Registry<LevelStem> p_250443_) {
-      f_129670_.info("Forcing world upgrade!");
-      WorldUpgrader worldupgrader = new WorldUpgrader(p_195489_, p_195490_, p_250443_, p_195491_);
-      Component component = null;
-
-      while(!worldupgrader.m_18829_()) {
-         Component component1 = worldupgrader.m_18837_();
-         if (component != component1) {
-            component = component1;
-            f_129670_.info(worldupgrader.m_18837_().getString());
-         }
-
-         int i = worldupgrader.m_18834_();
-         if (i > 0) {
-            int j = worldupgrader.m_18835_() + worldupgrader.m_18836_();
-            f_129670_.info("{}% completed ({} / {} chunks)...", Mth.m_14143_((float)j / (float)i * 100.0F), j, i);
-         }
-
-         if (!p_195492_.getAsBoolean()) {
-            worldupgrader.m_18820_();
-         } else {
-            try {
-               Thread.sleep(1000L);
-            } catch (InterruptedException interruptedexception) {
-            }
-         }
-      }
-
-   }
+        try {
+          Thread.sleep(1000L);
+        } catch (InterruptedException interruptedexception) {
+        }
+      }
+    }
+
+  }
 }
